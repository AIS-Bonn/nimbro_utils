#!/usr/bin/env python3
import os
import re
import argparse

# Default file paths
DEFAULT_INPUT_FILE = "./../__init__.py"
DEFAULT_OUTPUT_FILE = "./../lazy.py"

IMPORT_RE = re.compile(
    r"^from\s+([\w\.]+)\s+import\s+(.+)$"
)

def parse_imports(lines):
    """
    Parse lines to extract {symbol: (module, symbol_in_module)}.
    Assumes one symbol or multiple comma separated symbols on each import line, while ignoring inline comments.
    """
    imports = {}
    for line in lines:
        line = line.strip()
        if not line or line.startswith("#"):
            continue
        # Remove inline comments (outside quotes)
        if "#" in line:
            quote_open = False
            new_line = ""
            for part in line.split("#"):
                new_line += part
                # Check for uneven number of quotes to determine if inside a string
                if part.count('"') % 2 != 0 or part.count("'") % 2 != 0:
                    quote_open = not quote_open
                if not quote_open:
                    break # Stop processing parts if we're outside a string and found a comment
            line = new_line.strip()

        m = IMPORT_RE.match(line)
        if m:
            module = m.group(1)
            symbols_str = m.group(2)
            symbols = [s.strip() for s in symbols_str.split(",") if s.strip()]
            for sym in symbols:
                imports[sym] = (module, sym)
    return imports

def generate_lazy_imports(imports, input_filename):
    """
    Generate the content of DEFAULT_OUTPUT_FILE
    """
    header = """\"\"\"
This file is autogenerated to lazily import symbols from '{file}'.\n
Do NOT edit manually.
\"\"\"\n
import importlib
\n_lazy_imports = {{
""".format(file=os.path.basename(input_filename))
    body_lines = []
    for sym, (module, _) in imports.items():
        body_lines.append(f'    "{sym}": ("{module}", "{sym}"),')
    body = "\n".join(body_lines)
    footer = """
}
\n_import_cache = {}

def __getattr__(name):
    if name in _import_cache:
        return _import_cache[name]
    if name in _lazy_imports:
        module_name, attr_name = _lazy_imports[name]
        module = importlib.import_module(module_name)
        attr = getattr(module, attr_name)
        _import_cache[name] = attr
        return attr
    raise AttributeError(f"Module '{__name__}' has no attribute '{name}'.")

def __dir__():
    return sorted(list(globals().keys()) + list(_lazy_imports.keys()))
"""
    return header + body + footer

def main():
    parser = argparse.ArgumentParser(
        description="Generate a lazy import file from an existing import file."
    )
    parser.add_argument(
        "-i", "--input",
        type=str,
        default=DEFAULT_INPUT_FILE,
        help=f"Path to the input file containing imports (default: {DEFAULT_INPUT_FILE})"
    )
    parser.add_argument(
        "-o", "--output",
        type=str,
        default=DEFAULT_OUTPUT_FILE,
        help=f"Path to the output file for lazy imports (default: {DEFAULT_OUTPUT_FILE})"
    )
    args = parser.parse_args()

    input_file = args.input
    output_file = args.output

    if not os.path.exists(input_file):
        print(f"Error: Input file '{input_file}' not found.")
        return

    with open(input_file, "r") as f:
        lines = f.readlines()

    imports = parse_imports(lines)
    content = generate_lazy_imports(imports, input_file)

    with open(output_file, "w") as f:
        f.write(content)

    print(f"Generated '{output_file}' with '{len(imports)}' lazy imports.")

if __name__ == "__main__":
    main()
